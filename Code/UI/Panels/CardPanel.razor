@using System
@using CardGame.Effects
@using Sandbox.UI

@inherits Panel
@namespace CardGame.UI

@if ( Card is null )
{
	return;
}

<root>
	<div class="header @( Card.Rarity )">
		<label class="card-name">@Card.Name</label>
		<div class="card-cost">
			<label>@( Card.EffectiveCost )MP</label>
		</div>
	</div>

	<div class="actions">
		@if ( Card.IsInstant )
		{
			<label class="card-instant">[Instant]</label>
		}

		@if ( Card.Targeting != Card.CardTargets.Enemy )
		{
			<label class="card-targeting">[Target @( Card.Targeting )]</label>
		}

		@if ( Card.Targets > 1 )
		{
			<label class="card-targets">[AOE - Targets @( Card.Targets ) Slots]</label>
		}

		@if ( Card.ActiveEffect is not null )
		{
			if ( !string.IsNullOrWhiteSpace( Card.ActiveEffect.Description ) )
			{
				if ( Card.Effect.Power.IsRandom )
				{
					<label class="card-effect" IsRich="@true">
						@Card.ActiveEffect.Description.Replace( "@", $"{Card.Effect.Power.Min}-{Card.Effect.Power.Max}" ).Replace( "\n", "<br>" ))
					</label>
				}
				else
				{
					<label class="card-effect" IsRich="@true">
						@Card.ActiveEffect.Description.Replace( "@", Card.Effect.Power.Min.ToString() ).Replace( "\n", "<br>" ))
					</label>
				}
			}
		}

		@foreach ( var action in Card.Actions )
		{
			var desc = action.ActiveEffect?.Description;

			switch ( action.Type )
			{
				case CardGame.Action.ActionType.Attack:
					<div class="attack-action action">
						<img class="action-icon" src="/materials/actionicons/sword.png"/>
						@if ( action.EffectivePower.IsRandom )
						{
							<label class="attack">@( action.EffectivePower.Min )-@( action.EffectivePower.Max )</label>
						}
						else
						{
							<label class="attack">@( action.EffectivePower.Min )</label>
						}

						@if ( !string.IsNullOrWhiteSpace( desc ) )
						{
							if ( action.Effect.Power.IsRandom )
							{
								<label class="effect" IsRich="@true">
									@desc.Replace( "@", $"{action.Effect.Power.Min}-{action.Effect.Power.Max}" ).Replace( "\n", "<br>" ))
								</label>
							}
							else
							{
								<label class="effect" IsRich="@true">
									@desc.Replace( "@", action.Effect.Power.Min.ToString() ).Replace( "\n", "<br>" ))
								</label>
							}
						}
					</div>
					break;
				case CardGame.Action.ActionType.Defense:
					<div class="defense-action action">
						<img class="action-icon" src="/materials/actionicons/shield.png"/>
						@if ( action.EffectivePower.IsRandom )
						{
							<label class="defense">@( action.EffectivePower.Min )-@( action.EffectivePower.Max )</label>
						}
						else
						{
							<label class="defense">@( action.EffectivePower.Min )</label>
						}

						@if ( !string.IsNullOrWhiteSpace( desc ) )
						{
							if ( action.Effect.Power.IsRandom )
							{
								<label class="effect" IsRich="@true">
									@desc.Replace( "@", $"{action.Effect.Power.Min}-{action.Effect.Power.Max}" ).Replace( "\n", "<br>" ))
								</label>
							}
							else
							{
								<label class="effect" IsRich="@true">
									@desc.Replace( "@", action.Effect.Power.Min.ToString() ).Replace( "\n", "<br>" ))
								</label>
							}
						}
					</div>
					break;
				default:
					throw new ArgumentOutOfRangeException();
			}
		}
	</div>

	@if ( HasClass( "hide" ) )
	{
		<img class="missing-icon" src="/materials/cards/missing.png" alt="?"/>
	}

	<div class="card-type @( Card.Rarity )">- @( Card.Type ) Card -</div>
</root>
