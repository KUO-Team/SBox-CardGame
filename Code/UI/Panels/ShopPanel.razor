@using System
@using Sandbox.UI

@inherits Panel
@namespace CardGame.UI

@if ( !ShopManager.IsValid() )
{
	return;
}

<root>
	<label class="title">Card Packs</label>
	<div class="cards">
		@foreach ( var item in CardPacks.OrderBy( x => x.Pack!.Rarity ).ThenBy( x => x.Cost ) )
		{
			var purchased = item == LastPurchasedItem ? "purchased" : "";
			<div class="shop-item @( ShopManager.CanBuyItem( item ) ? "" : "cant-afford" ) @( purchased )">
				<CardPackPanel Pack="@item.Pack" onclick="@( () => BuyCardPack( item ) )"></CardPackPanel>
				<label class="cost">@( item.Cost )g</label>
			</div>
		}
	</div>

	<label class="title">Relics</label>
	<div class="relics">
		@foreach ( var item in Relics.OrderBy( x => x.Relic!.Rarity ).ThenBy( x => x.Cost ) )
		{
			var purchased = item.Relic == LastPurchasedItem ? "purchased" : "";
			<div class="shop-item @( ShopManager.CanBuyItem( item ) ? "" : "cant-afford" ) @( purchased )">
				<RelicPanel Relic="@item.Relic" onclick="@( () => BuyRelic( item ) )"></RelicPanel>
				<label class="cost">@( item.Cost )g</label>
			</div>
		}
	</div>

	<div class="button-container">
		<button class="@( CanAfford(ShopManager.RerollCost) ? "" : "disabled" )" onclick="@Reroll">Reroll (@( ShopManager.RerollCost )g)</button>
		<div class="row">
			<button class="@( CanAfford(ShopManager.RerollKeywordCost) ? "" : "disabled" )" onclick="@ToggleRerollKeywordMenu">Reroll By Keyword (@( ShopManager.RerollKeywordCost )g)</button>
			<button class="@( CanAfford(ShopManager.RerollTypeCost) ? "" : "disabled" )" onclick="@ToggleTypeSelectionMenu">Reroll By Type (@( ShopManager.RerollTypeCost )g)</button>
		</div>
		<button class="@( CanHeal() ? "" : "disabled" )" onclick="@Heal">Heal (@( ShopManager.HealCost )g)</button>
		<button onclick="@ToggleTradeMenu">Trade</button>
		<button onclick="@Close">Close</button>
	</div>
	
	<div class="trade-menu hidden" @ref="_tradeMenu">
		<label class="title">Trade</label>
		<div class="relics">
			@foreach ( var relic in RelicManager.Instance?.Relics ?? [] )
			{
				<RelicPanel class="@(SelectedRelicsForTradeIn.Contains( relic.Data.Id ) ? "trade" : "")" Relic="@relic.Data" onclick="@(() => ToggleRelicSelection( relic.Data.Id ))"></RelicPanel>
			}
		</div>

		<div class="trade-info hidden" @ref="_tradeInfo">
			<label>Select 2 relics of the same rarity to receive 1 random relic of the next higher rarity.</label>
			<label>Some specific relic combinations may yield a unique relic instead of a random one.</label>
			<label>If no eligible combination is found, you'll receive a random relic as usual.</label>
		</div>
		<button class="show-info" onclick="@ToggleTradeInfo">?</button>
		
		<div class="button-container">
			<button onclick="@CompleteTradeIn">Trade</button>
			<button onclick="@ToggleTradeMenu">Close</button>
		</div>
	</div>

	<div class="keyword-reroll-selection selection hidden" @ref="_keywordSelection">
		<label class="title">Reroll By Keyword</label>
		<div class="keywords">
			@foreach ( var keyword in ShopManager?.Keywords ?? [] )
			{
				<button onclick="@( () => RerollByKeyword( keyword ) )">@keyword</button>
			}
			<button onclick="@ToggleRerollKeywordMenu">Close</button>
		</div>
	</div>

	<div class="type-reroll-selection selection hidden" @ref="_typeSelection">
		<label class="title">Reroll By Card Type</label>
		<div class="keywords">
			@foreach ( var type in Enum.GetValues<Card.CardType>() )
			{
				<button onclick="@( () => RerollByType( type ) )">@type</button>
			}
			<button onclick="@ToggleTypeSelectionMenu">Close</button>
		</div>
	</div>
	
	<PackOpeningPanel class="hidden" @ref="_packOpeningPanel"></PackOpeningPanel>
</root>
