@using Sandbox.UI
@using Sandbox.Services
@using CardGame.Data

@inherits MenuSubPanel
@namespace CardGame.UI

<root>
	<div class="main">
		<div class="tab-selection">
			<button class="@( SelectedTab?.Id == "collection" ? "disabled" : "" )" onclick="@( () => ChangeTabs( "collection" ) )">Collection</button>
			<button class="@( SelectedTab?.Id == "leaderboards" ? "disabled" : "" )" onclick="@( () => ChangeTabs( "leaderboards" ) )">Leaderboards</button>
			<button class="@( SelectedTab?.Id == "achievements" ? "disabled" : "" )" onclick="@( () => ChangeTabs( "achievements" ) )">Achievements</button>
			<button class="@( SelectedTab?.Id == "stats" ? "disabled" : "" )" onclick="@( () => ChangeTabs( "stats" ) )">Statistics</button>
		</div>

		<div class="tabs" @ref="_tabContainer">
			<div class="tab hidden" id="collection">
				@{
					var cards = CardDataList.All
						.Where( x => x.IsAvailable )
						.ToList();
					var relics = RelicDataList.All
						.Where( x => x.IsAvailable )
						.ToList();

					var totalCards = cards.Count;
					var totalRelics = relics.Count;
					var totalCardsAndRelics = totalCards + totalRelics;

					var foundCards = SeenCards.Count;
					var foundRelics = SeenRelics.Count;
					var totalCardsAndRelicsFound = foundCards + foundRelics;
				}

				<div class="row">
					<div class="tab-title">Collection</div>
					<div class="tab-title">@( totalCardsAndRelicsFound )/@( totalCardsAndRelics )</div>
				</div>

				<label class="title">@( SeenCards.Count )/@( cards.Count ) Cards</label>

				<div class="cards">
					@foreach ( var card in cards.OrderByDescending( y => y.Rarity ).ThenBy( x => x.Type ).ThenBy( y => y.Name ) )
					{
						<CardPanel class="@( SeenCards.Contains( card.Id ) ? "" : "hide" )" Card="@card"></CardPanel>
					}
				</div>

				<label class="title">@( SeenRelics.Count )/@( relics.Count ) Relics</label>

				<div class="relic-container">
					<label class="sub-title">Found In Shops</label>
					@foreach ( var rarityGroup in relics
						.Where( x => x.Availabilities.HasFlag( Relic.RelicAvailabilities.Shop ) )
						.GroupBy( x => x.Rarity )
						.OrderByDescending( g => g.Key ) )
					{
						<label class="rarity-title">@( rarityGroup.Key.ToString() ) Relics</label>
						<div class="relics">
							@foreach ( var relic in rarityGroup.OrderBy( x => x.Name ) )
							{
								<RelicPanel class="@( SeenRelics.Contains( relic.Id ) ? "" : "hide" )"
								            Relic="@relic"></RelicPanel>
							}
						</div>
					}
				</div>

				<div class="relic-container">
					<label class="sub-title">Found In Events</label>
					@foreach ( var rarityGroup in relics
						.Where( x => x.Availabilities.HasFlag( Relic.RelicAvailabilities.Event ) )
						.GroupBy( x => x.Rarity )
						.OrderByDescending( g => g.Key ) )
					{
						<label class="rarity-title">@( rarityGroup.Key.ToString() ) Relics</label>
						<div class="relics">
							@foreach ( var relic in rarityGroup.OrderBy( x => x.Name ) )
							{
								<RelicPanel class="@( SeenRelics.Contains( relic.Id ) ? "" : "hide" )" Relic="@relic"></RelicPanel>
							}
						</div>
					}
				</div>

				<div class="relic-container">
					<label class="sub-title">Traded For</label>
					@foreach ( var rarityGroup in relics
						.Where( x => x.Availabilities.HasFlag( Relic.RelicAvailabilities.Trade ) )
						.GroupBy( x => x.Rarity )
						.OrderByDescending( g => g.Key ) )
					{
						<label class="rarity-title">@( rarityGroup.Key.ToString() ) Relics</label>
						<div class="relics">
							@foreach ( var relic in rarityGroup.OrderBy( x => x.Name ) )
							{
								<RelicPanel class="@( SeenRelics.Contains( relic.Id ) ? "" : "hide" )" Relic="@relic"></RelicPanel>
							}
						</div>
					}
				</div>
			</div>

			<div class="tab hidden" id="leaderboards">
				<div class="tab-selection">
					<button class="@( _openLeaderboard?.Id == "Runs Won" ? "disabled" : "" )" onclick="@( () => ChangeLeaderboard( "Runs Won" ) )">Runs Won
					</button>
					<button class="@( _openLeaderboard?.Id == "Runs" ? "disabled" : "" )" onclick="@( () => ChangeLeaderboard( "Runs" ) )">Runs
					</button>
				</div>
				<div class="leaderboards" @ref="_leaderboardContainer">
					@foreach ( var board in _leaderboards )
					{
						<div class="leaderboard hidden" id="@board.Key">
							<div class="row">
								<div class="tab-title">@board.Key</div>
								<i onclick="@( () => RefreshLeaderboard( board.Value ) )">refresh</i>
							</div>
							<div class="board">
								@if ( board.Value.Entries.Any() )
								{
									foreach ( var entry in board.Value.Entries )
									{
										<div
											class="entry @GetRank( (int)entry.Rank ) @( IsMe( entry.SteamId ) ? "me" : "" )">
											<label class="entry-rank">@( entry.Rank ).</label>
											<img class="entry-avatar" src="avatar:@( entry.SteamId )" alt=""/>
											<label class="entry-displayname">@( entry.DisplayName )</label>
											<label class="entry-value">@( entry.Value )</label>
										</div>
									}
								}
								else
								{
									<div class="no-entries">
										No Entries Found!
									</div>
								}
							</div>
						</div>
					}
				</div>
			</div>

			<div class="tab hidden" id="achievements">
				<div class="tab-title">Achievements</div>

				<div class="achievements item-container">
					@foreach ( var achievement in Achievements.All.OrderByDescending( x => x.IsVisible ) )
					{
						<div class="achievement @( achievement.IsUnlocked ? "unlocked" : "locked" )">
							<img class="achievement-icon" src="@achievement.Icon" alt="Achievement icon"/>
							<div class="row">
								<div class="achievement-title">
									@if ( achievement.IsVisible )
									{
										@( achievement.Title )
									}
									else
									{
										@( "???" )
									}
								</div>

								<div class="achievement-description">
									@if ( achievement.IsVisible )
									{
										@( achievement.Description )
									}
									else
									{
										@( "???" )
									}
								</div>
							</div>
						</div>
					}
				</div>
			</div>

			<div class="tab hidden" id="stats">
				<div class="tab-title">Global Stats</div>
				<div class="stats item-container">
					@foreach ( var stat in _globalStatEntries )
					{
						<div class="stat">@stat.Name: @stat.Value</div>
					}
				</div>
				<div class="tab-title">Local Stats</div>
				<div class="stats item-container">
					@foreach ( var stat in _localStatEntries )
					{
						<div class="stat">@stat.Name: @stat.Value</div>
					}
				</div>
			</div>
		</div>

		<div class="button-container">
			<button onclick="@this.Hide">Close</button>
		</div>
	</div>
</root>
