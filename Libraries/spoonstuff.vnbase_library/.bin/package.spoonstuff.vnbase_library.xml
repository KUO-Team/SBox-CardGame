<?xml version="1.0"?>
<doc>
    <assembly>
        <name>package.spoonstuff.vnbase_library</name>
    </assembly>
    <members>
        <member name="T:VNBase.Effects">
            <summary>
            Contains all the base effects that can be used.
            </summary>
        </member>
        <member name="T:VNBase.Effects.Typewriter">
            <summary>
            A simple typewriter effect.
            </summary>
        </member>
        <member name="T:VNBase.ScriptPlayer">
            <summary>
            Responsible for handling visual novel base scripts.
            </summary>
        </member>
        <member name="F:VNBase.ScriptPlayer._environment">
            <summary>
            The active dialogue environment.
            Will be empty if there is no active dialogue.
            </summary>
        </member>
        <member name="M:VNBase.ScriptPlayer.SetEnvironment(SandLang.Dialogue)">
            <summary>
            Sets the active dialogue environment.
            </summary>
        </member>
        <member name="P:VNBase.ScriptPlayer.DialogueHistory">
            <summary>
            All previously shown labels.
            </summary>
        </member>
        <member name="M:VNBase.ScriptPlayer.CanSkip">
            <summary>
            Checks if the current dialogue section can be skipped.
            </summary>
        </member>
        <member name="P:VNBase.ScriptPlayer.ActiveScript">
            <summary>
            The currently active script.
            </summary>
        </member>
        <member name="P:VNBase.ScriptPlayer.ActiveLabel">
            <summary>
            The currently active script label.
            </summary>
        </member>
        <member name="P:VNBase.ScriptPlayer.IsScriptActive">
            <summary>
            If there is an active playing script.
            </summary>
        </member>
        <member name="P:VNBase.ScriptPlayer.InitialScript">
            <summary>
            If not empty, will load the script at this path on initial component start.
            </summary>
        </member>
        <member name="P:VNBase.ScriptPlayer.State">
            <summary>
            The <see cref="T:VNBase.ScriptState"/>.
            </summary>
        </member>
        <member name="P:VNBase.ScriptPlayer.IsAutomaticMode">
            <summary>
            Automatic mode moves through dialogues without choices automatically.
            </summary>
        </member>
        <member name="P:VNBase.ScriptPlayer.IsAutomaticModeAvailable">
            <summary>
            If automatic mode can be enabled.
            </summary>
        </member>
        <member name="M:VNBase.ScriptPlayer.LoadScript(System.String)">
            <summary>
            Read and load the script at the provided path.
            </summary>
            <param name="path">Path to the script to load.</param>
        </member>
        <member name="M:VNBase.ScriptPlayer.LoadScript(VNBase.Assets.Script)">
            <summary>
            Load the provided Script object.
            </summary>
            <param name="script">Script to load.</param>
        </member>
        <member name="M:VNBase.ScriptPlayer.UnloadScript">
            <summary>
            Unloads the currently active script.
            </summary>
        </member>
        <member name="M:VNBase.ScriptPlayer.SkipDialogueEffect">
            <summary>
            Skip the currently active text effect.
            </summary>
        </member>
        <member name="T:VNBase.ScriptState">
            <summary>
            Contains a structure for the current active script state.
            </summary>
        </member>
        <member name="P:VNBase.ScriptState.DialogueText">
            <summary>
            The currently active script label text.
            </summary>
        </member>
        <member name="P:VNBase.ScriptState.Background">
            <summary>
            Path to the currently active background image.
            </summary>
        </member>
        <member name="P:VNBase.ScriptState.SpeakingCharacter">
            <summary>
            The currently active speaking character.
            </summary>
        </member>
        <member name="P:VNBase.ScriptState.Characters">
            <summary>
            Characters to display for this label.
            </summary>
        </member>
        <member name="P:VNBase.ScriptState.Choices">
            <summary>
            The choices for this dialogue.
            </summary>
        </member>
        <member name="P:VNBase.ScriptState.Sounds">
            <summary>
            Any currently playing sounds.
            </summary>
        </member>
        <member name="P:VNBase.ScriptState.IsDialogueFinished">
            <summary>
            If the dialogue has finished writing text.
            </summary>
        </member>
        <member name="M:VNBase.ScriptState.Clear">
            <summary>
            Clears the active ScriptState.
            </summary>
        </member>
        <member name="T:VNBase.Assets.IAsset">
            <summary>
            An on disk asset that can be used in VNBase scripts.
            </summary>
        </member>
        <member name="P:VNBase.Assets.IAsset.Path">
            <summary>
            The path to the asset on disk.
            </summary>
        </member>
        <member name="T:VNBase.Assets.AssetResource">
            <summary>
            A base class for all asset game resources.
            You should still mark asset classes that inherit from this with [GameResource(...)]
            </summary>
        </member>
        <member name="T:VNBase.Assets.Background">
            <summary>
            A background image asset.
            </summary>
        </member>
        <member name="M:VNBase.Assets.Background.#ctor(System.String)">
            <summary>
            A background image asset.
            </summary>
        </member>
        <member name="T:VNBase.Assets.Character">
            <summary>
            Defines a VNBase character.
            </summary>
        </member>
        <member name="P:VNBase.Assets.Character.Name">
            <summary>
            The name of the character.
            </summary>
        </member>
        <member name="P:VNBase.Assets.Character.Title">
            <summary>
            The title of the character.
            If blank, we assume no title.
            </summary>
        </member>
        <member name="P:VNBase.Assets.Character.NameColor">
            <summary>
            The color of the character's name.
            </summary>
        </member>
        <member name="P:VNBase.Assets.Character.TitleColor">
            <summary>
            The color of the character's title.
            </summary>
        </member>
        <member name="P:VNBase.Assets.Character.ActivePortrait">
            <summary>
            The name of the active portrait image.
            Includes extension.
            </summary>
        </member>
        <member name="P:VNBase.Assets.Character.ActivePortraitPath">
            <summary>
            Path to the active portrait image.
            </summary>
        </member>
        <member name="T:VNBase.Assets.Music">
            <summary>
            Represents a music asset.
            </summary>
        </member>
        <member name="M:VNBase.Assets.Music.#ctor(System.String)">
            <summary>
            Represents a music asset.
            </summary>
        </member>
        <member name="T:VNBase.Assets.Sound">
            <summary>
            A playable sound asset.
            </summary>
        </member>
        <member name="M:VNBase.Assets.Sound.#ctor(System.String)">
            <summary>
            A playable sound asset.
            </summary>
        </member>
        <member name="P:VNBase.Assets.Sound.EventName">
            <summary>
            The name of the <see cref="T:Sandbox.SoundEvent"/> this asset is tied to.
            </summary>
        </member>
        <member name="P:VNBase.Assets.Sound.Event">
            <summary>
            If this asset is constructed with a SoundEvent, this is that event. Otherwise, null.
            </summary>
        </member>
        <member name="P:VNBase.Assets.Sound.Handle">
            <summary>
            Handle to interface with the playing sound. If this asset isn't playing, this is null.
            </summary>
        </member>
        <member name="P:VNBase.Assets.Sound.MixerName">
            <summary>
            The name of the target mixer.
            </summary>
        </member>
        <member name="P:VNBase.Assets.Sound.Path">
            <summary>
            If this asset is constructed with a SoundEvent, returns the path to the event on disk.
            Otherwise, returns an empty string.
            </summary>
        </member>
        <member name="T:VNBase.Assets.Script">
            <summary>
            Defines a VNBase script.
            </summary>
        </member>
        <member name="P:VNBase.Assets.Script.Dialogue">
            <summary>
            This is where you want to write your script.
            </summary>
        </member>
        <member name="P:VNBase.Assets.Script.NextScript">
            <summary>
            The script to run after this one has finished.
            </summary>
        </member>
        <member name="P:VNBase.Assets.Script.Path">
            <summary>
            If this script is initialized from a file,
            this is the path to that script file.
            </summary>
        </member>
        <member name="P:VNBase.Assets.Script.FromFile">
            <summary>
            If this script was initialized from a file or not.
            </summary>
        </member>
        <member name="P:VNBase.Assets.Script.OnChoiceSelected">
            <summary>
            Called when a choice is selected from this script.
            </summary>
        </member>
        <member name="M:VNBase.Assets.Script.#ctor">
            <summary>
            Create a new empty script.
            </summary>
        </member>
        <member name="M:VNBase.Assets.Script.#ctor(System.String)">
            <summary>
            Create a new script from a file.
            </summary>
            <param name="path">The path to the script file.</param>
        </member>
        <member name="M:VNBase.Assets.Script.#ctor(System.String,VNBase.Assets.Script)">
            <summary>
            Create a new script from a file.
            </summary>
            <param name="path">The path to the script file.</param>
            <param name="nextScript">The next script to run after this one has finished.</param>
        </member>
        <member name="M:VNBase.Assets.Script.OnLoad">
            <summary>
            Called when the script is loaded by the <see cref="T:VNBase.ScriptPlayer"/>
            </summary>
        </member>
        <member name="M:VNBase.Assets.Script.OnUnload">
            <summary>
            Called after the script has finished executing by the <see cref="T:VNBase.ScriptPlayer"/>
            </summary>
        </member>
        <member name="M:VNBase.Assets.Script.GetEnvironment">
            <summary>
            Get this scripts local environment map.
            </summary>
        </member>
        <member name="T:VNBase.Settings">
            <summary>
            Settings for the script player.
            </summary>
        </member>
        <member name="P:VNBase.Settings.TextEffect">
            <summary>
            The currently active text effect.
            </summary>
        </member>
        <member name="P:VNBase.Settings.TextEffectSpeed">
            <summary>
            Time used for the active text effect to determine text delays.
            </summary>
        </member>
        <member name="P:VNBase.Settings.SkipActions">
            <summary>
            The actions to skip the currently active text effect.
            By default, this is set to "jump".
            </summary>
        </member>
        <member name="P:VNBase.Settings.SkipActionEnabled">
            <summary>
            If we are able to skip the active text effect using a skip action.
            </summary>
        </member>
        <member name="P:VNBase.Settings.HistoryInputs">
            <summary>
            The Inputs to show the history UI.
            </summary>
        </member>
        <member name="P:VNBase.Settings.SettingsInputs">
            <summary>
            The Inputs to show the settings UI.
            </summary>
        </member>
        <member name="P:VNBase.Settings.HideUIInputs">
            <summary>
            The Inputs to toggle the UI.
            </summary>
        </member>
        <member name="P:VNBase.Settings.StopMusicPlaybackOnUnload">
            <summary>
            When a script is unloaded, should we end all music playback from it?
            </summary>
        </member>
        <member name="P:VNBase.Settings.ControlPanelEnabled">
            <summary>
            If we should show the control panel.
            </summary>
        </member>
        <member name="P:VNBase.Settings.SettingsEnabled">
            <summary>
            If we should show the settings UI.
            If your game implements its own, you can disable this.
            </summary>
        </member>
        <member name="F:VNBase.Settings.BackgroundsPath">
            <summary>
            Path to the background image assets.
            </summary>
        </member>
        <member name="F:VNBase.Settings.CharacterPortraitsPath">
            <summary>
            Path to character portrait images.
            </summary>
        </member>
        <member name="F:VNBase.Settings.CharacterResourcesPath">
            <summary>
            Path to the character resources.
            </summary>
        </member>
        <member name="F:VNBase.Settings.AutoDelay">
            <summary>
            The amount of time to wait if we are in automatic mode before switching labels.
            </summary>
        </member>
        <member name="P:SandLang.BuiltinFunctions.Builtins">
            <summary>
            Contains mappings from symbols to builtin executable functions
            </summary>
        </member>
        <member name="T:SandLang.Dialogue">
            <summary>
            This class contains the dialogue structures as well as the functions to process dialogue and labels from the S-expression code
            </summary>
        </member>
        <member name="T:SandLang.Dialogue.Label">
            <summary>
            Represents a dialogue step.
            </summary>
        </member>
        <member name="T:SandLang.Dialogue.Choice">
            <summary>
            Represents a choice by the player, possible required conditions for it to be a viable choice, and the new label to direct towards.
            </summary>
        </member>
        <member name="M:SandLang.Dialogue.Choice.IsAvailable(SandLang.IEnvironment)">
            <summary>
            Returns whether this condition is available to the player.
            </summary>
        </member>
        <member name="T:SandLang.Dialogue.Input">
            <summary>
            Represents an input from the player, and the variable to store the input in.
            </summary>
        </member>
        <member name="M:SandLang.Dialogue.Input.SetValue(SandLang.IEnvironment,SandLang.Value)">
            <summary>
            Sets the value of the input variable in the environment.
            </summary>
            <param name="environment">The environment to set the value in.</param>
            <param name="value">The value to set the variable to.</param>
        </member>
        <member name="T:SandLang.Dialogue.AfterLabel">
            <summary>
            Represents code to execute as well as the new label to direct towards.
            </summary>
        </member>
        <member name="T:SandLang.IEnvironment">
            <summary>
            Interface for an environment that can store and retrieve variables.
            </summary>
        </member>
        <member name="T:SandLang.EnvironmentMap">
            <summary>
            A map of environment variables.
            </summary>
        </member>
        <member name="M:SandLang.EnvironmentMap.#ctor(System.Collections.Generic.Dictionary{System.String,SandLang.Value})">
            <summary>
            A map of environment variables.
            </summary>
        </member>
        <member name="T:SandLang.GlobalEnvironment">
            <summary>
            The global environment.
            </summary>
        </member>
        <member name="P:SandLang.GlobalEnvironment.Map">
            <summary>
            Provides access to the global environment map.
            </summary>
        </member>
        <member name="M:SandLang.GlobalEnvironment.Clear">
            <summary>
            Clears the global environment.
            </summary>
        </member>
        <member name="T:SandLang.UndefinedVariableException">
            <summary>
            Exception thrown when a variable is not found in the environment.
            </summary>
        </member>
        <member name="T:SandLang.InvalidParametersException">
            <summary>
            Exception thrown when the parameters passed to a function are invalid.
            </summary>
        </member>
        <member name="T:SandLang.ResourceNotFoundException">
            <summary>
            Exception that is thrown if a required resource is unable to be found.
            </summary>
        </member>
        <member name="T:SandLang.SParen">
            <summary>
            A list of values that can be parsed from a string.
            </summary>
        </member>
        <member name="T:SandLang.SParen.Token">
            <summary>
            A token that can be parsed from a string.
            </summary>
        </member>
        <member name="M:SandLang.SParen.TokenizeText(System.String)">
            <summary>
            Tokenizes a string into a list of tokens.
            </summary>
            <param name="text">The string to tokenize.</param>
        </member>
        <member name="T:SandLang.FormattableText">
            <summary>
            Represents text that can be formatted.
            </summary>
        </member>
        <member name="M:SandLang.FormattableText.#ctor(System.String)">
            <summary>
            Represents text that can be formatted.
            </summary>
        </member>
        <member name="M:SandLang.FormattableText.Format(SandLang.IEnvironment)">
            <summary>
            Formats the text using the given environment.
            </summary>
            <param name="environment">The environment to format the text with.</param>
            <returns>The formatted text.</returns>
        </member>
        <member name="T:SandLang.Value.NoneValue">
            <summary>
            Represents a null value, that is the absence of a value.
            </summary>
        </member>
        <member name="T:SandLang.Value.WrapperValue`1">
            <summary>
            For representing C# world variables (such as components) in SandLang.
            </summary>
            <remarks>
            Cannot be used with builtins, only really useful for environment-defined functions.
            </remarks>
        </member>
        <member name="M:SandLang.Value.WrapperValue`1.#ctor(`0)">
            <summary>
            For representing C# world variables (such as components) in SandLang.
            </summary>
            <remarks>
            Cannot be used with builtins, only really useful for environment-defined functions.
            </remarks>
        </member>
        <member name="T:SandLang.Value.VariableReferenceValue">
            <summary>
            Represents symbols, that is anything that isn't a number or a string and hasn't been dereferenced to a variable yet
            </summary>
        </member>
        <member name="M:SandLang.Value.VariableReferenceValue.#ctor(System.String)">
            <summary>
            Represents symbols, that is anything that isn't a number or a string and hasn't been dereferenced to a variable yet
            </summary>
        </member>
        <member name="T:SandLang.Value.BooleanValue">
            <summary>
            Represents a true or false value, a boolean.
            </summary>
        </member>
        <member name="M:SandLang.Value.BooleanValue.#ctor(System.Boolean)">
            <summary>
            Represents a true or false value, a boolean.
            </summary>
        </member>
    </members>
</doc>
